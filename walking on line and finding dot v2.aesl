<!DOCTYPE aesl-source>
<network>
<event size="1" name="pair_run"/>
<event size="14" name="debug_log"/>
<node name="USB Serial Device" nodeId="{3a62a583-b3d2-4dbb-8734-cdda994ea5cf}"># variables for state
var state[4] = [0,0,0,0]
var new_state[4] = [0,0,0,0]

# stop timer 0
timer.period[0] = 0
# reset outputs
call sound.system(-1)
call leds.top(0,0,0)
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)

# subroutine to display the current state
sub display_state
	call leds.circle(0,state[1]*32,0,state[3]*32,0,state[2]*32,0,state[0]*32)

onevent prox
	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 975 do
		motor.left.target = -100
		motor.right.target = 500
		emit pair_run 0
	end

	when prox.ground.delta[0] >= 900 and prox.ground.delta[1] &lt;= 400 do
		motor.left.target = 450
		motor.right.target = -100
		emit pair_run 1
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		call leds.top(28,32,0)
		motor.left.target = 500
		motor.right.target = 300
		emit pair_run 2
	end

	when prox.ground.delta[0] >= 325 and prox.ground.delta[0] &lt;= 1023 and prox.ground.delta[1] >= 325 and prox.ground.delta[1] &lt;= 1023 do
		if state[0] == 0 then
			call leds.top(4,32,0)
			new_state[0] = 1
			motor.left.target = 300
			motor.right.target = 300
			emit pair_run 3
		end
	end

	when prox.horizontal[0] >= 800 and prox.horizontal[1] >= 800 and prox.horizontal[2] >= 800 and prox.horizontal[3] >= 800 and prox.horizontal[4] >= 800 do
		if state[0] == 1 then
			motor.left.target = -200
			motor.right.target = -200
			timer.period[0] = 750
			emit pair_run 4
		end
	end

	when prox.ground.delta[1] >= 925 do
		if state[0] == 1 and state[1] == 0 and state[3] == 0 then
			timer.period[0] = 1000
			motor.left.target = 250
			motor.right.target = 150
			new_state[0] = 1
			new_state[1] = 1
			new_state[3] = 1
			call leds.top(27,32,3)
			emit pair_run 7
		end
	end

	when prox.ground.delta[0] >= 925 do
		if state[0] == 1 and state[2] == 0 and state[3] == 0 then
			timer.period[0] = 1000
			motor.left.target = 150
			motor.right.target = 250
			call leds.top(32,32,0)
			new_state[0] = 1
			new_state[2] = 1
			new_state[3] = 1
			emit pair_run 9
		end
	end

	when prox.ground.delta[0] >= 900 and prox.ground.delta[1] >= 900 do
		if state[0] == 1 and state[3] == 0 then
			call leds.top(32,0,0)
			timer.period[0] = 1000
			motor.left.target = 300
			motor.right.target = 350
			new_state[0] = 1
			new_state[3] = 1
			emit pair_run 11
		end
	end

	call math.copy(state, new_state)
	callsub display_state


onevent timer0
	timer.period[0] = 0
	if state[0] == 1 and state[1] == 0 then
		motor.left.target = 150
		motor.right.target = -200
		timer.period[0] = 2000
		new_state[0] = 1
		new_state[1] = 1
		emit pair_run 5
	end

	if state[0] == 1 and state[1] == 1 then
		call leds.bottom.left(0,0,32)
		call leds.bottom.right(0,0,32)
		new_state[0] = 1
		new_state[1] = 0
		motor.left.target = 300
		motor.right.target = 300
		emit pair_run 6
	end

	if state[0] == 1 and state[1] == 1 and state[3] == 1 then
		new_state[0] = 1
		new_state[1] = 0
		new_state[3] = 0
		emit pair_run 8
	end

	if state[0] == 1 and state[2] == 1 and state[3] == 1 then
		new_state[0] = 1
		new_state[2] = 0
		new_state[3] = 0
		emit pair_run 10
	end

	if state[0] == 1 and state[3] == 1 then
		motor.left.target = 0
		motor.right.target = 0
		new_state[0] = 1
		new_state[3] = 1
		call leds.top(32,0,32)
		emit pair_run 12
	end

	call math.copy(state, new_state)
	callsub display_state

<toolsPlugins>
<ThymioVisualProgramming>
<vplroot xml-format-version="1">
<program advanced_mode="1">
<set>
<block value1="1" type="event" value0="2" value3="975" name="proxground" value2="400"/>
<block value1="0" type="state" value0="0" value3="0" name="statefilter" value2="0"/>
<block value1="500" type="action" value0="-100" name="move"/>
</set>
<set>
<block value1="2" type="event" value0="1" value3="900" name="proxground" value2="400"/>
<block value1="0" type="state" value0="0" value3="0" name="statefilter" value2="0"/>
<block value1="-100" type="action" value0="450" name="move"/>
</set>
<set>
<block value1="2" type="event" value0="2" value3="975" name="proxground" value2="400"/>
<block value1="0" type="state" value0="0" value3="0" name="statefilter" value2="0"/>
<block value1="32" type="action" value0="28" name="colortop" value2="0"/>
<block value1="300" type="action" value0="500" name="move"/>
</set>
<set>
<block value1="3" type="event" value0="3" value3="1023" name="proxground" value2="325"/>
<block value1="0" type="state" value0="2" value3="0" name="statefilter" value2="0"/>
<block value1="32" type="action" value0="4" name="colortop" value2="0"/>
<block value1="0" type="action" value0="1" value3="0" name="setstate" value2="0"/>
<block value1="300" type="action" value0="300" name="move"/>
</set>
<set>
<block value1="1" value5="0" type="event" value7="800" value0="1" value3="1" value6="0" value8="800" name="prox" value2="1" value4="1"/>
<block value1="0" type="state" value0="1" value3="0" name="statefilter" value2="0"/>
<block value1="-200" type="action" value0="-200" name="move"/>
<block type="action" value0="750" name="timer"/>
</set>
<set>
<block type="event" name="timeout"/>
<block value1="2" type="state" value0="1" value3="0" name="statefilter" value2="0"/>
<block value1="-200" type="action" value0="150" name="move"/>
<block type="action" value0="2000" name="timer"/>
<block value1="1" type="action" value0="1" value3="0" name="setstate" value2="0"/>
</set>
<set>
<block type="event" name="timeout"/>
<block value1="1" type="state" value0="1" value3="0" name="statefilter" value2="0"/>
<block value1="0" type="action" value0="0" name="colorbottom" value2="32"/>
<block value1="2" type="action" value0="1" value3="0" name="setstate" value2="0"/>
<block value1="300" type="action" value0="300" name="move"/>
</set>
<set>
<block value1="1" type="event" value0="0" value3="925" name="proxground" value2="0"/>
<block value1="2" type="state" value0="1" value3="2" name="statefilter" value2="0"/>
<block type="action" value0="1000" name="timer"/>
<block value1="150" type="action" value0="250" name="move"/>
<block value1="1" type="action" value0="1" value3="1" name="setstate" value2="0"/>
<block value1="32" type="action" value0="27" name="colortop" value2="3"/>
</set>
<set>
<block type="event" name="timeout"/>
<block value1="1" type="state" value0="1" value3="1" name="statefilter" value2="0"/>
<block value1="2" type="action" value0="1" value3="2" name="setstate" value2="0"/>
</set>
<set>
<block value1="0" type="event" value0="1" value3="925" name="proxground" value2="475"/>
<block value1="0" type="state" value0="1" value3="2" name="statefilter" value2="2"/>
<block type="action" value0="1000" name="timer"/>
<block value1="250" type="action" value0="150" name="move"/>
<block value1="32" type="action" value0="32" name="colortop" value2="0"/>
<block value1="0" type="action" value0="1" value3="1" name="setstate" value2="1"/>
</set>
<set>
<block type="event" name="timeout"/>
<block value1="0" type="state" value0="1" value3="1" name="statefilter" value2="1"/>
<block value1="0" type="action" value0="1" value3="2" name="setstate" value2="2"/>
</set>
<set>
<block value1="1" type="event" value0="1" value3="900" name="proxground" value2="900"/>
<block value1="0" type="state" value0="1" value3="2" name="statefilter" value2="0"/>
<block value1="0" type="action" value0="32" name="colortop" value2="0"/>
<block type="action" value0="1000" name="timer"/>
<block value1="350" type="action" value0="300" name="move"/>
<block value1="0" type="action" value0="1" value3="1" name="setstate" value2="0"/>
</set>
<set>
<block type="event" name="timeout"/>
<block value1="0" type="state" value0="1" value3="1" name="statefilter" value2="0"/>
<block value1="0" type="action" value0="0" name="move"/>
<block value1="0" type="action" value0="1" value3="1" name="setstate" value2="0"/>
<block value1="0" type="action" value0="32" name="colortop" value2="32"/>
</set>
<set>
<block value1="0" type="state" value0="0" value3="0" name="statefilter" value2="0"/>
</set>
</program>
</vplroot>
</ThymioVisualProgramming>
</toolsPlugins>
</node>
</network>
