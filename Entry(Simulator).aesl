<!DOCTYPE aesl-source>
<network>
<event name="pair_run" size="1"/>
<event name="debug_log" size="14"/>
<node nodeId="{3a62a583-b3d2-4dbb-8734-cdda994ea5cf}" name="USB Serial Device"># variables for state
var state[4] = [0,0,0,0]
var new_state[4] = [0,0,0,0]

# variables for notes
var notes[6]
var durations[6]
var note_index = 6
var note_count = 6
var wave[142]
var i
var wave_phase
var wave_intensity

# compute a sinus wave for sound
for i in 0:141 do
	wave_phase = (i-70)*468
	call math.cos(wave_intensity, wave_phase)
	wave[i] = wave_intensity/256
end
call sound.wave(wave)
# stop timer 0
timer.period[0] = 0
# reset outputs
call sound.system(-1)
call leds.top(0,0,0)
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)

# subroutine to display the current state
sub display_state
	call leds.circle(0,state[1]*32,0,state[3]*32,0,state[2]*32,0,state[0]*32)

# when a note is finished, play the next note
onevent sound.finished
	if note_index != note_count then
		call sound.freq(notes[note_index], durations[note_index])
		note_index += 1
	end

onevent prox
	if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
		motor.left.target = -350
		motor.right.target = 350
		timer.period[0] = 750
		new_state[0] = 1
		new_state[1] = 0
		new_state[2] = 0
		new_state[3] = 0
		emit pair_run 0
		_emit debug_log [0, 0x5, 0xc872, 0xd0, 0, 0x3e8, 0x7d0, 0x50, 0x311, 0x2ee, 0x35]
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 0 then
			motor.left.target = 300
			motor.right.target = 150
			timer.period[0] = 1000
			new_state[0] = 1
			new_state[1] = 0
			new_state[2] = 1
			new_state[3] = 0
			emit pair_run 3
			_emit debug_log [0x3, 0x5, 0xc873, 0xd0, 0xa, 0x190, 0x1c2, 0x29, 0x100d, 0x3e8, 0x32]
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 1 and state[2] == 1 and state[3] == 0 then
			motor.left.target = 500
			motor.right.target = -150
			emit pair_run 6
			_emit debug_log [0x6, 0x3, 0x873, 0x6, 0x190, 0x1c2, 0x44, 0x1407]
		end
	end

	when prox.ground.delta[0] >= 450 and prox.ground.delta[1] >= 450 do
		if state[0] == 0 and state[1] == 1 and state[2] == 1 and state[3] == 0 then
			motor.left.target = 500
			motor.right.target = -500
			emit pair_run 7
			_emit debug_log [0x7, 0x3, 0x873, 0x5, 0x190, 0x1c2, 0x44, 0x1400]
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] &lt;= 400 do
		if state[0] == 0 and state[1] == 1 and state[2] == 1 and state[3] == 0 then
			motor.left.target = 500
			motor.right.target = 350
			emit pair_run 8
			_emit debug_log [0x8, 0x3, 0x873, 0xa, 0x190, 0x1c2, 0x44, 0x1411]
		end
	end

	when prox.ground.delta[0] &lt;= 400 and prox.ground.delta[1] >= 450 do
		if state[0] == 0 and state[1] == 1 and state[2] == 1 and state[3] == 0 then
			motor.left.target = -50
			motor.right.target = 200
			emit pair_run 9
			_emit debug_log [0x9, 0x3, 0x873, 0x9, 0x190, 0x1c2, 0x44, 0x90e]
		end
	end

	when prox.horizontal[2] >= 2000 do
		if state[0] == 0 and state[1] == 1 and state[2] == 1 and state[3] == 0 then
			motor.left.target = -350
			motor.right.target = 350
			timer.period[0] = 500
			new_state[0] = 0
			new_state[1] = 0
			new_state[2] = 0
			new_state[3] = 1
			emit pair_run 10
			_emit debug_log [0xa, 0x5, 0xc872, 0xd0, 0x100, 0x3e8, 0x7d0, 0x44, 0x311, 0x1f4, 0x4f]
		end
	end

	call math.copy(state, new_state)
	callsub display_state


onevent timer0
	timer.period[0] = 0
	if state[0] == 1 and state[1] == 0 and state[2] == 0 and state[3] == 0 then
		motor.left.target = 0
		motor.right.target = 0
		timer.period[0] = 250
		new_state[0] = 1
		new_state[1] = 1
		new_state[2] = 0
		new_state[3] = 0
		emit pair_run 1
		_emit debug_log [0x1, 0x5, 0xc876, 0xd0, 0x35, 0xa0a, 0xfa, 0x2c]
	end

	if state[0] == 1 and state[1] == 1 and state[2] == 0 and state[3] == 0 then
		motor.left.target = 250
		motor.right.target = 250
		new_state[0] = 1
		new_state[1] = 1
		new_state[2] = 1
		new_state[3] = 0
		emit pair_run 2
		_emit debug_log [0x2, 0x4, 0xd876, 0x2c, 0xf0f, 0x29]
	end

	if state[0] == 1 and state[1] == 0 and state[2] == 1 and state[3] == 0 then
		motor.left.target = 100
		motor.right.target = -100
		timer.period[0] = 1000
		new_state[0] = 0
		new_state[1] = 0
		new_state[2] = 1
		new_state[3] = 0
		emit pair_run 4
		_emit debug_log [0x4, 0x5, 0xc876, 0xd0, 0x32, 0xc08, 0x3e8, 0x4d]
	end

	if state[0] == 0 and state[1] == 0 and state[2] == 1 and state[3] == 0 then
		motor.left.target = 200
		motor.right.target = 200
		timer.period[0] = 750
		new_state[0] = 0
		new_state[1] = 1
		new_state[2] = 1
		new_state[3] = 0
		emit pair_run 5
		_emit debug_log [0x5, 0x5, 0xc876, 0xd0, 0x4d, 0xe0e, 0x2ee, 0x44]
	end

	if state[0] == 0 and state[1] == 0 and state[2] == 0 and state[3] == 1 then
		motor.left.target = 300
		motor.right.target = 300
		timer.period[0] = 2000
		new_state[0] = 1
		new_state[1] = 1
		new_state[2] = 1
		new_state[3] = 1
		emit pair_run 11
		_emit debug_log [0xb, 0x5, 0xc876, 0xd0, 0x4f, 0x1010, 0x7d0, 0x28]
	end

	if state[0] == 1 and state[1] == 1 and state[2] == 1 and state[3] == 1 then
		call leds.top(32,0,0)
		call math.copy(notes[0:5], [440, 524, 440, 370, 311, 370])
		call math.copy(durations[0:5], [7, 7, 14, 7, 7, 14])
		note_index = 1
		note_count = 6
		call sound.freq(notes[0], durations[0])
		motor.left.target = 500
		motor.right.target = -500
		emit pair_run 12
		_emit debug_log [0xc, 0x5, 0xb976, 0x80, 0x28, 0x8820, 0x7238, 0x188, 0x1400]
	end

	call math.copy(state, new_state)
	callsub display_state

<toolsPlugins>
<ThymioVisualProgramming>
<vplroot xml-format-version="1">
<program advanced_mode="1">
<set>
<block value1="0" value4="0" name="prox" value7="1000" value3="0" value5="0" value6="0" value0="0" type="event" value8="2000" value2="0"/>
<block value1="2" name="statefilter" value3="2" value0="2" type="state" value2="2"/>
<block value1="350" name="move" value0="-350" type="action"/>
<block name="timer" value0="750" type="action"/>
<block value1="2" name="setstate" value3="2" value0="1" type="action" value2="2"/>
</set>
<set>
<block name="timeout" type="event"/>
<block value1="2" name="statefilter" value3="2" value0="1" type="state" value2="2"/>
<block value1="0" name="move" value0="0" type="action"/>
<block name="timer" value0="250" type="action"/>
<block value1="1" name="setstate" value3="2" value0="1" type="action" value2="2"/>
</set>
<set>
<block name="timeout" type="event"/>
<block value1="1" name="statefilter" value3="2" value0="1" type="state" value2="2"/>
<block value1="250" name="move" value0="250" type="action"/>
<block value1="1" name="setstate" value3="2" value0="1" type="action" value2="1"/>
</set>
<set>
<block value1="2" name="proxground" value3="450" value0="2" type="event" value2="400"/>
<block value1="1" name="statefilter" value3="2" value0="1" type="state" value2="1"/>
<block value1="150" name="move" value0="300" type="action"/>
<block name="timer" value0="1000" type="action"/>
<block value1="2" name="setstate" value3="2" value0="1" type="action" value2="1"/>
</set>
<set>
<block name="timeout" type="event"/>
<block value1="2" name="statefilter" value3="2" value0="1" type="state" value2="1"/>
<block value1="-100" name="move" value0="100" type="action"/>
<block name="timer" value0="1000" type="action"/>
<block value1="2" name="setstate" value3="2" value0="2" type="action" value2="1"/>
</set>
<set>
<block name="timeout" type="event"/>
<block value1="2" name="statefilter" value3="2" value0="2" type="state" value2="1"/>
<block value1="200" name="move" value0="200" type="action"/>
<block name="timer" value0="750" type="action"/>
<block value1="1" name="setstate" value3="2" value0="2" type="action" value2="1"/>
</set>
<set>
<block value1="2" name="proxground" value3="450" value0="1" type="event" value2="400"/>
<block value1="1" name="statefilter" value3="2" value0="2" type="state" value2="1"/>
<block value1="-150" name="move" value0="500" type="action"/>
</set>
<set>
<block value1="1" name="proxground" value3="450" value0="1" type="event" value2="400"/>
<block value1="1" name="statefilter" value3="2" value0="2" type="state" value2="1"/>
<block value1="-500" name="move" value0="500" type="action"/>
</set>
<set>
<block value1="2" name="proxground" value3="450" value0="2" type="event" value2="400"/>
<block value1="1" name="statefilter" value3="2" value0="2" type="state" value2="1"/>
<block value1="350" name="move" value0="500" type="action"/>
</set>
<set>
<block value1="1" name="proxground" value3="450" value0="2" type="event" value2="400"/>
<block value1="1" name="statefilter" value3="2" value0="2" type="state" value2="1"/>
<block value1="200" name="move" value0="-50" type="action"/>
</set>
<set>
<block value1="0" value4="0" name="prox" value7="1000" value3="0" value5="0" value6="0" value0="0" type="event" value8="2000" value2="1"/>
<block value1="1" name="statefilter" value3="2" value0="2" type="state" value2="1"/>
<block value1="350" name="move" value0="-350" type="action"/>
<block name="timer" value0="500" type="action"/>
<block value1="2" name="setstate" value3="1" value0="2" type="action" value2="2"/>
</set>
<set>
<block name="timeout" type="event"/>
<block value1="2" name="statefilter" value3="1" value0="2" type="state" value2="2"/>
<block value1="300" name="move" value0="300" type="action"/>
<block name="timer" value0="2000" type="action"/>
<block value1="1" name="setstate" value3="1" value0="1" type="action" value2="1"/>
</set>
<set>
<block name="timeout" type="event"/>
<block value1="1" name="statefilter" value3="1" value0="1" type="state" value2="1"/>
<block value1="0" name="colortop" value0="32" type="action" value2="0"/>
<block value1="260" value4="257" name="sound" value3="258" value5="514" value0="259" type="action" value2="515"/>
<block value1="-500" name="move" value0="500" type="action"/>
</set>
<set>
<block value1="0" name="statefilter" value3="0" value0="0" type="state" value2="0"/>
</set>
</program>
</vplroot>
</ThymioVisualProgramming>
</toolsPlugins>
</node>
</network>
